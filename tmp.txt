import type { NextApiRequest, NextApiResponse } from 'next';

// Define a type for the satellite data (parsed)
type SatelliteData = {
  id: string;
  launchNumber: string;
  epochDate: string;
  inclination: string;
  rightAscension: string;
  eccentricity: string;
  perigee: string;
  anomaly: string;
  motion: string;
  revNumber: string;
};

// Define the handler function for the API route
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Get the satellite ID from the query parameters
  const { id } = req.query;

  if (!id || typeof id !== 'string') {
    res.status(400).json({ error: 'Satellite ID is required' });
    return;
  }

  // Sample satellite data string (you could also load this from a file or database)
  const satelliteData = `
  1 35937U 09052A   24225.86503657 0.00000000  00000-0  00000-0 0    01
  2 35937  57.9832 135.3255 0008504 170.0792 189.9207 12.83533774    09
  1 35938U 09052B   24243.82418646 0.00000000  00000-0  00000-0 0    01
  2 35938  57.9859 130.6386 0013788 275.8330  84.1669 12.74832043    03
  `;

  // Split the data into lines and parse it into satellite objects
  const satelliteLines = satelliteData.trim().split('\n');
  const satellites: SatelliteData[] = [];

  for (let i = 0; i < satelliteLines.length; i += 2) {
    const line1 = satelliteLines[i].trim();
    const line2 = satelliteLines[i + 1].trim();

    const satellite: SatelliteData = {
      id: line1.split(' ')[1],
      launchNumber: line1.split(' ')[0],
      epochDate: line2.substring(18, 32),
      inclination: line2.substring(8, 16),
      rightAscension: line2.substring(17, 25),
      eccentricity: line2.substring(26, 33),
      perigee: line2.substring(34, 42),
      anomaly: line2.substring(43, 51),
      motion: line2.substring(52, 63),
      revNumber: line2.substring(64, 68),
    };

    satellites.push(satellite);
  }

  // Find the satellite data by ID
  const satellite = satellites.find((sat) => sat.id === id);

  if (!satellite) {
    res.status(404).json({ error: 'Satellite not found' });
    return;
  }

  try {
    // Call the external API to fetch additional data for this satellite
    const response = await fetch(
      `https://www.n2yo.com/inc/all.php?s=${satellite.id}`
    );
    const locationData = await response.json();

    // Return the satellite location
    res.status(200).json({
      satellite,
      location: locationData,
    });
  } catch (error) {
    res.status(500).json({ error: 'Error fetching satellite location' });
  }
}
